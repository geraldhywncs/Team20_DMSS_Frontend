name: Selenium Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.13.0'

    - name: Pull selenium chrome image
      run: |
        docker pull selenium/standalone-chrome
        docker network create dmss
        docker run -d --shm-size=2g --name selenium-browsers --network=dmss -p 4444:4444 -v $GITHUB_WORKSPACE/moneygowhere.side:/tests/moneygowhere.side -v $GITHUB_WORKSPACE/src:/app/src -v $GITHUB_WORKSPACE/public:/app/public -v $GITHUB_WORKSPACE/tailwind.config.js:/app/tailwind.config.js -v $GITHUB_WORKSPACE/package.json:/app/package.json selenium/standalone-chrome:latest

    - name: Pull docker backend
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ap-southeast-2
        aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com
        docker pull 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend
        docker run -d --name dmss_python_container --network=dmss -p 5000:5000 409151997352.dkr.ecr.ap-southeast-2.amazonaws.com/dmss-backend

    - name: Download nodejs
      run: |
        docker exec -u root selenium-browsers bash -c 'curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -'
        docker exec -u root selenium-browsers bash -c 'apt-get install -y nodejs'
   
    - name: Install selenium side runner
      run: |
        docker exec -u root selenium-browsers bash -c 'npm install -g selenium-side-runner'
        
    - name: npm install
      run: |
        docker exec -u root selenium-browsers bash -c 'cd /app && npm install'
        # docker exec -u root selenium-browsers bash -c 'npm install'
        
    - name: npm run build
      run: |
        docker exec -u root selenium-browsers bash -c 'cd /app && npm run build'

    - name: npm install -g serve
      run: |
        docker exec -u root selenium-browsers bash -c 'cd /app && npm install -g serve'

    - name: npm build
      run: |
        docker exec -u root selenium-browsers bash -c 'cd /app && serve -s build > log.txt 2>&1 &'
        
    - name: exec selenium side runner
      run: |
        docker exec -u root selenium-browsers bash -c 'selenium-side-runner /tests/moneygowhere.side'
        exit_code=$?
        
        if [ $exit_code -ne 0 ]; then
          echo "selenium-side-runner failed with exit code $exit_code"
          exit 1  # Fail the step
        else
          echo "selenium-side-runner completed successfully"
        fi

    - name: Remove Docker container
      run: |
        docker stop selenium-browsers
        docker rm selenium-browsers

    - name: Install dependencies
      run: npm install

    - name: Build frontend with ESLint warnings ignored
      run: npm run build-no-eslint

    # - name: Configure AWS CLI
    #   run: |
    #     aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws configure set default.region ap-southeast-2

    - name: Sync build output to S3
      run: aws s3 sync build/ s3://moneygowheredmss --delete
